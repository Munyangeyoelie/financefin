import React, { useState, useEffect } from "react";
import { supabase } from "../lib/supabase"; // Adjust the import path

// Define the Expense type based on the schema with added status
interface Expense {
  id: string; // uuid
  title: string;
  amount: number; // numeric
  category: string;
  reference_number: string;
  expense_date: string; // date
  created_at: string; // timestamptz
  updated_at: string; // timestamptz
  status: string; // Added status field
}

const ExpenseList: React.FC = () => {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [newExpense, setNewExpense] = useState({
    id: "", // uuid will be auto-generated by Supabase
    title: "",
    amount: 0,
    category: "",
    reference_number: "",
    expense_date: "",
    created_at: new Date().toISOString(), // Set initial value
    updated_at: new Date().toISOString(), // Set initial value
    status: "Pending", // Default status
  });
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null); // For editing
  const [loading, setLoading] = useState(false);
  const [startDate, setStartDate] = useState<string>(""); // Start date for filtering
  const [endDate, setEndDate] = useState<string>(""); // End date for filtering

  // Fetch expenses from Supabase
  const fetchExpenses = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from("expenses")
      .select("*")
      .order("created_at", { ascending: false });

    if (error) {
      console.error("Error fetching expenses:", error);
    } else {
      setExpenses(data || []);
    }
    setLoading(false);
  };

  // Add a new expense to Supabase
  const addExpense = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    const expenseToInsert = {
      ...newExpense,
      id: crypto.randomUUID(), // Generate a temporary UUID (Supabase will override)
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    const { data, error } = await supabase
      .from("expenses")
      .insert([expenseToInsert])
      .select();

    if (error) {
      console.error("Error adding expense:", error);
    } else {
      setExpenses([data[0], ...expenses]);
      setNewExpense({
        id: "",
        title: "",
        amount: 0,
        category: "",
        reference_number: "",
        expense_date: "",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        status: "Pending",
      });
    }
    setLoading(false);
  };

  // Edit an expense in Supabase
  const updateExpense = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingExpense) return;

    setLoading(true);
    const { data, error } = await supabase
      .from("expenses")
      .update({
        title: editingExpense.title,
        amount: editingExpense.amount,
        category: editingExpense.category,
        reference_number: editingExpense.reference_number,
        expense_date: editingExpense.expense_date,
        status: editingExpense.status,
        updated_at: new Date().toISOString(),
      })
      .eq("id", editingExpense.id)
      .select();

    if (error) {
      console.error("Error updating expense:", error);
    } else {
      setExpenses(
        expenses.map((exp) => (exp.id === editingExpense.id ? data[0] : exp))
      );
      setEditingExpense(null);
    }
    setLoading(false);
  };

  // Delete an expense from Supabase
  const deleteExpense = async (id: string) => {
    setLoading(true);
    const { error } = await supabase.from("expenses").delete().eq("id", id);

    if (error) {
      console.error("Error deleting expense:", error);
    } else {
      setExpenses(expenses.filter((exp) => exp.id !== id));
    }
    setLoading(false);
  };

  // Print a single transaction
  const printTransaction = (expense: Expense) => {
    const printWindow = window.open("", "_blank");
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>Expense Transaction</title>
            <style>
              body { font-family: Arial, sans-serif; padding: 20px; }
              h2 { text-align: center; }
              table { width: 100%; border-collapse: collapse; margin-top: 20px; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
            </style>
          </head>
          <body>
            <h2>Expense Transaction</h2>
            <table>
              <tr><th>ID</th><td>${expense.id}</td></tr>
              <tr><th>Title</th><td>${expense.title}</td></tr>
              <tr><th>Amount</th><td>Rwf ${expense.amount.toFixed(2)}</td></tr>
              <tr><th>Category</th><td>${expense.category}</td></tr>
              <tr><th>Reference Number</th><td>${
                expense.reference_number
              }</td></tr>
              <tr><th>Expense Date</th><td>${new Date(
                expense.expense_date
              ).toLocaleDateString()}</td></tr>
              <tr><th>Status</th><td>${expense.status}</td></tr>
              <tr><th>Created At</th><td>${new Date(
                expense.created_at
              ).toLocaleString()}</td></tr>
              <tr><th>Updated At</th><td>${new Date(
                expense.updated_at
              ).toLocaleString()}</td></tr>
            </table>
            <script>window.print(); window.close();</script>
          </body>
        </html>
      `);
      printWindow.document.close();
    }
  };

  // Print all transactions within the selected date range
  const printAllTransactions = () => {
    const sortedExpenses = [...expenses].sort(
      (a, b) =>
        new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
    );

    // Filter expenses by date range
    const filteredExpenses = sortedExpenses.filter((expense) => {
      const expenseDate = new Date(expense.created_at);
      const start = startDate ? new Date(startDate) : null;
      const end = endDate ? new Date(endDate) : null;

      if (start && end) {
        return expenseDate >= start && expenseDate <= end;
      } else if (start) {
        return expenseDate >= start;
      } else if (end) {
        return expenseDate <= end;
      }
      return true; // If no dates selected, include all
    });

    const printWindow = window.open("", "_blank");
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>All Expense Transactions</title>
            <style>
              body { font-family: Arial, sans-serif; padding: 20px; }
              h2 { text-align: center; }
              table { width: 100%; border-collapse: collapse; margin-top: 20px; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
            </style>
          </head>
          <body>
            <h2>All Expense Transactions (${startDate || "Start"} to ${
        endDate || "End"
      })</h2>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Title</th>
                  <th>Amount</th>
                  <th>Category</th>
                  <th>Reference Number</th>
                  <th>Expense Date</th>
                  <th>Status</th>
                  <th>Created At</th>
                  <th>Updated At</th>
                </tr>
              </thead>
              <tbody>
                ${filteredExpenses
                  .map(
                    (expense) => `
                      <tr>
                        <td>${expense.id}</td>
                        <td>${expense.title}</td>
                        <td>$${expense.amount.toFixed(2)}</td>
                        <td>${expense.category}</td>
                        <td>${expense.reference_number}</td>
                        <td>${new Date(
                          expense.expense_date
                        ).toLocaleDateString()}</td>
                        <td>${expense.status}</td>
                        <td>${new Date(
                          expense.created_at
                        ).toLocaleString()}</td>
                        <td>${new Date(
                          expense.updated_at
                        ).toLocaleString()}</td>
                      </tr>
                    `
                  )
                  .join("")}
              </tbody>
            </table>
            <script>window.print(); window.close();</script>
          </body>
        </html>
      `);
      printWindow.document.close();
    }
  };

  // Fetch expenses on component mount
  useEffect(() => {
    fetchExpenses();
  }, []);

  return (
    <div className="container mx-auto p-4 bg-gray-100 min-h-screen">
      {/* Header and Date Range Selection */}
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Expense List</h1>
        <div className="flex space-x-4">
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            className="border p-2 rounded w-full"
            placeholder="Start Date"
          />
          <input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            className="border p-2 rounded w-full"
            placeholder="End Date"
          />
          <button
            onClick={printAllTransactions}
            className="bg-purple-500 text-white p-2 rounded hover:bg-purple-600"
          >
            Print All Transactions
          </button>
        </div>
      </div>

      {/* Add/Edit Expense Form */}
      <form
        onSubmit={editingExpense ? updateExpense : addExpense}
        className="mb-6 bg-white p-4 rounded shadow"
      >
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <input
            type="text"
            placeholder="Title"
            value={editingExpense ? editingExpense.title : newExpense.title}
            onChange={(e) =>
              editingExpense
                ? setEditingExpense({
                    ...editingExpense,
                    title: e.target.value,
                  })
                : setNewExpense({ ...newExpense, title: e.target.value })
            }
            className="border p-2 rounded w-full"
            required
          />
          <input
            type="number"
            step="0.01"
            placeholder="Amount"
            value={
              editingExpense ? editingExpense.amount : newExpense.amount || ""
            }
            onChange={(e) =>
              editingExpense
                ? setEditingExpense({
                    ...editingExpense,
                    amount: parseFloat(e.target.value) || 0,
                  })
                : setNewExpense({
                    ...newExpense,
                    amount: parseFloat(e.target.value) || 0,
                  })
            }
            className="border p-2 rounded w-full"
            required
          />
          <input
            type="text"
            placeholder="Category"
            value={
              editingExpense ? editingExpense.category : newExpense.category
            }
            onChange={(e) =>
              editingExpense
                ? setEditingExpense({
                    ...editingExpense,
                    category: e.target.value,
                  })
                : setNewExpense({ ...newExpense, category: e.target.value })
            }
            className="border p-2 rounded w-full"
            required
          />
          <input
            type="text"
            placeholder="Reference Number"
            value={
              editingExpense
                ? editingExpense.reference_number
                : newExpense.reference_number
            }
            onChange={(e) =>
              editingExpense
                ? setEditingExpense({
                    ...editingExpense,
                    reference_number: e.target.value,
                  })
                : setNewExpense({
                    ...newExpense,
                    reference_number: e.target.value,
                  })
            }
            className="border p-2 rounded w-full"
            required
          />
          <input
            type="date"
            value={
              editingExpense
                ? editingExpense.expense_date
                : newExpense.expense_date
            }
            onChange={(e) =>
              editingExpense
                ? setEditingExpense({
                    ...editingExpense,
                    expense_date: e.target.value,
                  })
                : setNewExpense({ ...newExpense, expense_date: e.target.value })
            }
            className="border p-2 rounded w-full"
            required
          />
          <select
            value={editingExpense ? editingExpense.status : newExpense.status}
            onChange={(e) =>
              editingExpense
                ? setEditingExpense({
                    ...editingExpense,
                    status: e.target.value,
                  })
                : setNewExpense({ ...newExpense, status: e.target.value })
            }
            className="border p-2 rounded w-full"
          >
            <option value="Pending">Pending</option>
            <option value="Approved">Approved</option>
            <option value="Rejected">Rejected</option>
          </select>
        </div>
        <div className="mt-4 flex space-x-2">
          <button
            type="submit"
            className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
            disabled={loading}
          >
            {loading
              ? "Processing..."
              : editingExpense
              ? "Update Expense"
              : "Add Expense"}
          </button>
          {editingExpense && (
            <button
              type="button"
              onClick={() => setEditingExpense(null)}
              className="bg-gray-500 text-white p-2 rounded hover:bg-gray-600"
            >
              Cancel
            </button>
          )}
        </div>
      </form>

      {/* Expense Table */}
      <div className="bg-white rounded shadow overflow-x-auto">
        <table className="min-w-full table-auto">
          <thead className="bg-gray-200">
            <tr>
              <th className="px-4 py-2 text-left">ID</th>
              <th className="px-4 py-2 text-left">Title</th>
              <th className="px-4 py-2 text-left">Amount</th>
              <th className="px-4 py-2 text-left">Category</th>
              <th className="px-4 py-2 text-left">Reference Number</th>
              <th className="px-4 py-2 text-left">Expense Date</th>
              <th className="px-4 py-2 text-left">Created At</th>
              <th className="px-4 py-2 text-left">Updated At</th>
              <th className="px-4 py-2 text-left">Status</th>
              <th className="px-4 py-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td colSpan={10} className="text-center py-4">
                  Loading...
                </td>
              </tr>
            ) : expenses.length === 0 ? (
              <tr>
                <td colSpan={10} className="text-center py-4">
                  No expenses found.
                </td>
              </tr>
            ) : (
              expenses.map((expense) => (
                <tr key={expense.id} className="border-t">
                  <td className="px-4 py-2">{expense.id}</td>
                  <td className="px-4 py-2">{expense.title}</td>
                  <td className="px-4 py-2">
                    {" "}
                    Rwf {expense.amount.toFixed(2)}
                  </td>
                  <td className="px-4 py-2">{expense.category}</td>
                  <td className="px-4 py-2">{expense.reference_number}</td>
                  <td className="px-4 py-2">
                    {new Date(expense.expense_date).toLocaleDateString()}
                  </td>
                  <td className="px-4 py-2">
                    {new Date(expense.created_at).toLocaleString()}
                  </td>
                  <td className="px-4 py-2">
                    {new Date(expense.updated_at).toLocaleString()}
                  </td>
                  <td className="px-4 py-2">
                    <span
                      className={`inline-block px-2 py-1 rounded text-sm ${
                        expense.status === "Approved"
                          ? "bg-green-100 text-green-800"
                          : expense.status === "Rejected"
                          ? "bg-red-100 text-red-800"
                          : "bg-yellow-100 text-yellow-800"
                      }`}
                    >
                      {expense.status}
                    </span>
                  </td>
                  <td className="px-4 py-2 flex space-x-2">
                    <button
                      onClick={() => setEditingExpense(expense)}
                      className="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => deleteExpense(expense.id)}
                      className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600"
                    >
                      Delete
                    </button>
                    <button
                      onClick={() => printTransaction(expense)}
                      className="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600"
                    >
                      Print
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ExpenseList;
